@page "/items"
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient Http
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using System.ComponentModel.DataAnnotations

<h3>Manage Dota 2 Items</h3>

<!-- Error/Success Messages -->
@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @(isError ? "alert-danger" : "alert-success")">@message</div>
}

<!-- Create/Edit Form -->
<EditForm Model="@currentItem" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <!-- Name (Required) -->
    <div class="mb-3">
        <label class="form-label">Name*</label>
        <InputText @bind-Value="currentItem.Name" class="form-control" />
        <ValidationMessage For="@(() => currentItem.Name)" />
    </div>

    <!-- Localized Name -->
    <div class="mb-3">
        <label class="form-label">Localized Name</label>
        <InputText @bind-Value="currentItem.LocalizedName" class="form-control" />
    </div>

    <!-- Description -->
    <div class="mb-3">
        <label class="form-label">Description</label>
        <InputTextArea @bind-Value="currentItem.Description" class="form-control" />
    </div>

    <!-- Cost -->
    <div class="mb-3">
        <label class="form-label">Cost*</label>
        <InputNumber @bind-Value="currentItem.Cost" class="form-control" />
        <ValidationMessage For="@(() => currentItem.Cost)" />
    </div>

    <!-- Is Recipe (Checkbox) -->
    <div class="mb-3 form-check">
        <InputCheckbox @bind-Value="currentItem.IsRecipe" class="form-check-input" />
        <label class="form-check-label">Is Recipe?</label>
    </div>

    <!-- Shop Tags -->
    <div class="mb-3">
        <label class="form-label">Shop Tags (comma separated)</label>
        <InputText @bind-Value="currentItem.ShopTags" class="form-control" />
    </div>

    <!-- Attributes (JSON) -->
    <div class="mb-3">
        <label class="form-label">Attributes (JSON)</label>
        <InputTextArea @bind-Value="currentItem.Attributes" class="form-control" placeholder='{"attribute":"value"}' />
    </div>

    <!-- Image URL -->
    <div class="mb-3">
        <label class="form-label">Image URL</label>
        <InputText @bind-Value="currentItem.ImageUrl" class="form-control" />
    </div>

    <div class="mb-3">
        <button type="submit" class="btn btn-primary me-2">
            @(isEditing ? "Update" : "Create")
        </button>
        @if (isEditing)
        {
            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
        }
    </div>
</EditForm>

<!-- Items Table -->
@if (items == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!items.Any())
{
    <div class="alert alert-info">No items found. Create one above!</div>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>Name</th>
                <th>Cost</th>
                <th>Recipe</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in items)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Cost</td>
                    <td>@(item.IsRecipe ? "Yes" : "No")</td>
                    <td>
                        <button @onclick="() => EditItem(item)" class="btn btn-sm btn-warning me-2">
                            <i class="bi bi-pencil"></i> Edit
                        </button>
                        <button @onclick="() => DeleteItem(item.Id)" class="btn btn-sm btn-danger">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Item>? items;
    private Item currentItem = new();
    private bool isEditing = false;
    private string message = "";
    private bool isError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    private async Task LoadItems()
    {
        try
        {
            var response = await Http.GetAsync("api/Items");
            if (response.IsSuccessStatusCode)
            {
                items = await response.Content.ReadFromJsonAsync<List<Item>>();
                message = "";
                isError = false;
            }
            else
            {
                message = $"Error: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
                isError = true;
            }
        }
        catch (Exception ex)
        {
            message = $"Error loading items: {ex.Message}";
            isError = true;
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            HttpResponseMessage response;
            
            if (isEditing)
            {
                response = await Http.PutAsJsonAsync($"api/Items/{currentItem.Id}", currentItem);
            }
            else
            {
                response = await Http.PostAsJsonAsync("api/Items", currentItem);
            }

            if (response.IsSuccessStatusCode)
            {
                message = $"Item successfully {(isEditing ? "updated" : "created")}!";
                isError = false;
                await LoadItems();
                ResetForm();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                message = $"API Error: {response.StatusCode} - {errorContent}";
                isError = true;
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            isError = true;
        }
    }

    private void EditItem(Item item)
    {
        currentItem = new Item
        {
            Id = item.Id,
            Name = item.Name,
            LocalizedName = item.LocalizedName,
            Description = item.Description,
            Cost = item.Cost,
            IsRecipe = item.IsRecipe,
            ShopTags = item.ShopTags,
            Attributes = item.Attributes,
            ImageUrl = item.ImageUrl
        };
        isEditing = true;
        message = "";
    }

    private void ResetForm()
    {
        currentItem = new Item
        {
            Name = "",
            LocalizedName = "",
            Description = "",
            Cost = 0,
            IsRecipe = false,
            ShopTags = "",
            Attributes = "{}",
            ImageUrl = ""
        };
        isEditing = false;
    }

    private void CancelEdit()
    {
        ResetForm();
        message = "";
    }

    private async Task DeleteItem(int id)
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?");
        if (!confirm) return;

        try
        {
            var response = await Http.DeleteAsync($"api/Items/{id}");
            if (response.IsSuccessStatusCode)
            {
                message = "Item deleted successfully!";
                isError = false;
                await LoadItems();
            }
            else
            {
                message = $"Error deleting item: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
                isError = true;
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            isError = true;
        }
    }

    public class Item
    {
        public int Id { get; set; }
        
        [Required(ErrorMessage = "Name is required")]
        [StringLength(100, ErrorMessage = "Name cannot exceed 100 characters")]
        public string Name { get; set; } = string.Empty;
        
        [StringLength(200, ErrorMessage = "Localized name cannot exceed 200 characters")]
        public string LocalizedName { get; set; } = string.Empty;
        
        public string Description { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Cost is required")]
        [Range(0, int.MaxValue, ErrorMessage = "Cost must be a positive number")]
        public int Cost { get; set; }
        
        public bool IsRecipe { get; set; }
        
        public string ShopTags { get; set; } = string.Empty;
        
        public string Attributes { get; set; } = "{}";
        
        [Url(ErrorMessage = "Please enter a valid URL")]
        public string ImageUrl { get; set; } = string.Empty;
    }

    [Inject]
    protected IJSRuntime JSRuntime { get; set; }
}