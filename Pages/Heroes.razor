@page "/heroes"
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient Http
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using System.ComponentModel.DataAnnotations
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;
@using System.ComponentModel.DataAnnotations;
@using System.ComponentModel.DataAnnotations.Schema;

<h3>Manage Dota 2 Heroes</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @(isError ? "alert-danger" : "alert-success")">@message</div>
}

<EditForm Model="@currentHero" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row">
        <div class="col-md-6">
            <div class="mb-3">
                <label class="form-label">Name*</label>
                <InputText @bind-Value="currentHero.Name" class="form-control" />
                <ValidationMessage For="@(() => currentHero.Name)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Localized Name</label>
                <InputText @bind-Value="currentHero.LocalizedName" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Primary Attribute*</label>
                <InputSelect @bind-Value="currentHero.PrimaryAttribute" class="form-control">
                    <option value="">Select Attribute</option>
                    <option value="Strength">Strength</option>
                    <option value="Agility">Agility</option>
                    <option value="Intelligence">Intelligence</option>
                    <option value="Universal">Universal</option>
                </InputSelect>
                <ValidationMessage For="@(() => currentHero.PrimaryAttribute)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Attack Type*</label>
                <InputSelect @bind-Value="currentHero.AttackType" class="form-control">
                    <option value="">Select Attack Type</option>
                    <option value="Melee">Melee</option>
                    <option value="Ranged">Ranged</option>
                </InputSelect>
                <ValidationMessage For="@(() => currentHero.AttackType)" />
            </div>
        </div>

        <div class="col-md-6">
            <div class="mb-3">
                <label class="form-label">Roles (comma separated)</label>
                <InputText @bind-Value="currentHero.Roles" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Image URL</label>
                <InputText @bind-Value="currentHero.ImageUrl" class="form-control" />
                @if (!string.IsNullOrEmpty(currentHero.ImageUrl))
                {
                    <img src="@currentHero.ImageUrl" alt="Hero image" style="max-height: 100px; margin-top: 10px;" />
                }
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <div class="mb-3">
                <label class="form-label">Base Health</label>
                <InputNumber @bind-Value="currentHero.BaseHealth" class="form-control" />
            </div>
        </div>
        <div class="col-md-4">
            <div class="mb-3">
                <label class="form-label">Base Mana</label>
                <InputNumber @bind-Value="currentHero.BaseMana" class="form-control" />
            </div>
        </div>
        <div class="col-md-4">
            <div class="mb-3">
                <label class="form-label">Move Speed</label>
                <InputNumber @bind-Value="currentHero.MoveSpeed" class="form-control" />
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="mb-3">
                <label class="form-label">Base Attack Min</label>
                <InputNumber @bind-Value="currentHero.BaseAttackMin" class="form-control" />
            </div>
        </div>
        <div class="col-md-6">
            <div class="mb-3">
                <label class="form-label">Base Attack Max</label>
                <InputNumber @bind-Value="currentHero.BaseAttackMax" class="form-control" />
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <div class="mb-3">
                <label class="form-label">Base Strength</label>
                <InputNumber @bind-Value="currentHero.BaseStrength" class="form-control" />
            </div>
            <div class="mb-3">
                <label class="form-label">Strength Gain</label>
                <InputNumber @bind-Value="currentHero.StrengthGain" class="form-control" step="0.1" />
            </div>
        </div>
        <div class="col-md-4">
            <div class="mb-3">
                <label class="form-label">Base Agility</label>
                <InputNumber @bind-Value="currentHero.BaseAgility" class="form-control" />
            </div>
            <div class="mb-3">
                <label class="form-label">Agility Gain</label>
                <InputNumber @bind-Value="currentHero.AgilityGain" class="form-control" step="0.1" />
            </div>
        </div>
        <div class="col-md-4">
            <div class="mb-3">
                <label class="form-label">Base Intelligence</label>
                <InputNumber @bind-Value="currentHero.BaseIntelligence" class="form-control" />
            </div>
            <div class="mb-3">
                <label class="form-label">Intelligence Gain</label>
                <InputNumber @bind-Value="currentHero.IntelligenceGain" class="form-control" step="0.1" />
            </div>
        </div>
    </div>

    <div class="mb-3">
        <button type="submit" class="btn btn-primary me-2">
            @(isEditing ? "Update" : "Create")
        </button>
        @if (isEditing)
        {
            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
            <a href="/abilities/hero/@currentHero.Id" class="btn btn-info ms-2">Manage Abilities</a>
        }
    </div>
</EditForm>

@if (heroes == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!heroes.Any())
{
    <div class="alert alert-info">No heroes found. Create one above!</div>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>Name</th>
                <th>Attribute</th>
                <th>Attack Type</th>
                <th>Move Speed</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var hero in heroes)
            {
                <tr>
                    <td>
                        @if (!string.IsNullOrEmpty(hero.ImageUrl))
                        {
                            <img src="@hero.ImageUrl" alt="@hero.Name" style="height: 30px; margin-right: 10px;" />
                        }
                        @hero.Name
                    </td>
                    <td>@hero.PrimaryAttribute</td>
                    <td>@hero.AttackType</td>
                    <td>@hero.MoveSpeed</td>
                    <td>
                        <button @onclick="() => EditHero(hero)" class="btn btn-sm btn-warning me-2">
                            <i class="bi bi-pencil"></i> Edit
                        </button>
                        <button @onclick="() => DeleteHero(hero.Id)" class="btn btn-sm btn-danger me-2">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                        <a href="/abilities/hero/@hero.Id" class="btn btn-sm btn-info">
                            <i class="bi bi-lightning-charge"></i> Abilities
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Hero>? heroes;
    private Hero currentHero = new();
    private bool isEditing = false;
    private string message = "";
    private bool isError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadHeroes();
    }

    private async Task LoadHeroes()
    {
        try
        {
            var response = await Http.GetAsync("api/Heroes");
            if (response.IsSuccessStatusCode)
            {
                heroes = await response.Content.ReadFromJsonAsync<List<Hero>>();
                message = "";
                isError = false;
            }
            else
            {
                message = $"Error: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
                isError = true;
            }
        }
        catch (Exception ex)
        {
            message = $"Error loading heroes: {ex.Message}";
            isError = true;
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            HttpResponseMessage response;
            
            if (isEditing)
            {
                response = await Http.PutAsJsonAsync($"api/Heroes/{currentHero.Id}", currentHero);
            }
            else
            {
                response = await Http.PostAsJsonAsync("api/Heroes", currentHero);
            }

            if (response.IsSuccessStatusCode)
            {
                message = $"Hero successfully {(isEditing ? "updated" : "created")}!";
                isError = false;
                await LoadHeroes();
                ResetForm();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                message = $"API Error: {response.StatusCode} - {errorContent}";
                isError = true;
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            isError = true;
        }
    }

    private void EditHero(Hero hero)
    {
        currentHero = new Hero
        {
            Id = hero.Id,
            Name = hero.Name,
            LocalizedName = hero.LocalizedName,
            PrimaryAttribute = hero.PrimaryAttribute,
            AttackType = hero.AttackType,
            Roles = hero.Roles,
            BaseHealth = hero.BaseHealth,
            BaseMana = hero.BaseMana,
            BaseArmor = hero.BaseArmor,
            MoveSpeed = hero.MoveSpeed,
            BaseAttackMin = hero.BaseAttackMin,
            BaseAttackMax = hero.BaseAttackMax,
            BaseStrength = hero.BaseStrength,
            StrengthGain = hero.StrengthGain,
            BaseAgility = hero.BaseAgility,
            AgilityGain = hero.AgilityGain,
            BaseIntelligence = hero.BaseIntelligence,
            IntelligenceGain = hero.IntelligenceGain,
            Abilities = new List<Ability>(),
            ImageUrl = hero.ImageUrl
        };
        isEditing = true;
        message = "";
    }

    private void ResetForm()
    {
        currentHero = new Hero
        {
            PrimaryAttribute = "Strength",
            AttackType = "Melee",
            BaseHealth = 200,
            BaseMana = 75,
            MoveSpeed = 300,
            BaseAttackMin = 30,
            BaseAttackMax = 40,
            BaseStrength = 20,
            StrengthGain = 2.0f,
            BaseAgility = 20,
            AgilityGain = 2.0f,
            BaseIntelligence = 20,
            IntelligenceGain = 2.0f
        };
        isEditing = false;
    }

    private void CancelEdit()
    {
        ResetForm();
        message = "";
    }

    private async Task DeleteHero(int id)
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this hero?");
        if (!confirm) return;

        try
        {
            var response = await Http.DeleteAsync($"api/Heroes/{id}");
            if (response.IsSuccessStatusCode)
            {
                message = "Hero deleted successfully!";
                isError = false;
                await LoadHeroes();
            }
            else
            {
                message = $"Error deleting hero: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
                isError = true;
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            isError = true;
        }
    }

    public class Hero
    {
        public int Id { get; set; }
        
        [Required(ErrorMessage = "Name is required")]
        [StringLength(100, ErrorMessage = "Name cannot exceed 100 characters")]
        public string Name { get; set; } = string.Empty;
        
        [StringLength(200, ErrorMessage = "Localized name cannot exceed 200 characters")]
        public string LocalizedName { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Primary attribute is required")]
        public string PrimaryAttribute { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Attack type is required")]
        public string AttackType { get; set; } = string.Empty;
        
        public string Roles { get; set; } = string.Empty;
        public int BaseHealth { get; set; }
        public int BaseMana { get; set; }
        public float BaseArmor { get; set; }
        public int MoveSpeed { get; set; }
        public int BaseAttackMin { get; set; }
        public int BaseAttackMax { get; set; }
        public int BaseStrength { get; set; }
        public float StrengthGain { get; set; }
        public int BaseAgility { get; set; }
        public float AgilityGain { get; set; }
        public int BaseIntelligence { get; set; }
        public float IntelligenceGain { get; set; }
        public List<Ability>? Abilities { get; set; } = new();
        
        [Url(ErrorMessage = "Please enter a valid URL")]
        public string ImageUrl { get; set; } = string.Empty;
    }

    public class Ability
    {
        [Key]
        public int Id { get; set; }
        
        [Required]
        [MaxLength(100)]
        public string Name { get; set; }
        
        [MaxLength(200)]
        public string LocalizedName { get; set; }
        
        public string Description { get; set; }
        
        public string AbilityType { get; set; }
        
        public string Affects { get; set; }
        
        public string Damage { get; set; }
        
        public string ImageUrl { get; set; }
        
        public string ManaCost { get; set; }
        
        public string Cooldown { get; set; }
        
        public int HeroId { get; set; }
        
        [ForeignKey("HeroId")]
        public virtual Hero Hero { get; set; }
    }

    [Inject]
    protected IJSRuntime JSRuntime { get; set; }
}