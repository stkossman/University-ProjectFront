@page "/abilities/hero/{heroId:int}"
@page "/abilities"
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient Http
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using System.ComponentModel.DataAnnotations

@if (HeroId > 0)
{
    <h3>Manage Abilities for @heroName</h3>
    <a href="/heroes" class="btn btn-secondary mb-3">
        <i class="bi bi-arrow-left"></i> Back to Heroes
    </a>
}
else
{
    <h3>All Abilities</h3>
    <a href="/heroes" class="btn btn-secondary mb-3">
        <i class="bi bi-arrow-left"></i> Back to Heroes
    </a>
}

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @(isError ? "alert-danger" : "alert-success")">@message</div>
}

@if (HeroId > 0)
{
    <EditForm Model="@currentAbility" OnValidSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <label class="form-label">Name*</label>
                    <InputText @bind-Value="currentAbility.Name" class="form-control" />
                    <ValidationMessage For="@(() => currentAbility.Name)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Localized Name</label>
                    <InputText @bind-Value="currentAbility.LocalizedName" class="form-control" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Ability Type*</label>
                    <InputSelect @bind-Value="currentAbility.AbilityType" class="form-control">
                        <option value="">Select Type</option>
                        <option value="Active">Active</option>
                        <option value="Passive">Passive</option>
                        <option value="Toggle">Toggle</option>
                        <option value="Autocast">Autocast</option>
                        <option value="Channeled">Channeled</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => currentAbility.AbilityType)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Affects</label>
                    <InputText @bind-Value="currentAbility.Affects" class="form-control" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Damage</label>
                    <InputText @bind-Value="currentAbility.Damage" class="form-control" />
                </div>
            </div>

            <div class="col-md-6">
                <div class="mb-3">
                    <label class="form-label">Description*</label>
                    <InputTextArea @bind-Value="currentAbility.Description" class="form-control" rows="4" />
                    <ValidationMessage For="@(() => currentAbility.Description)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Mana Cost</label>
                    <InputText @bind-Value="currentAbility.ManaCost" class="form-control" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Cooldown</label>
                    <InputText @bind-Value="currentAbility.Cooldown" class="form-control" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Image URL</label>
                    <InputText @bind-Value="currentAbility.ImageUrl" class="form-control" />
                    @if (!string.IsNullOrEmpty(currentAbility.ImageUrl))
                    {
                        <img src="@currentAbility.ImageUrl" alt="Ability image" style="max-height: 50px; margin-top: 10px;" />
                    }
                </div>
            </div>
        </div>

        <div class="mb-3">
            <button type="submit" class="btn btn-primary me-2">
                @(isEditing ? "Update" : "Create")
            </button>
            @if (isEditing)
            {
                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
            }
        </div>
    </EditForm>
}

@if (abilities == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!abilities.Any())
{
    <div class="alert alert-info">No abilities found. @(HeroId > 0 ? "Create one above!" : "")</div>
}
else
{
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Description</th>
                @if (HeroId == 0)
                {
                    <th>Hero</th>
                }
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ability in abilities)
            {
                <tr>
                    <td>
                        @if (!string.IsNullOrEmpty(ability.ImageUrl))
                        {
                            <img src="@ability.ImageUrl" alt="@ability.Name" style="height: 30px; margin-right: 10px;" />
                        }
                        @ability.Name
                    </td>
                    <td>@ability.AbilityType</td>
                    <td style="max-width: 300px; white-space: normal;">@ability.Description</td>
                    @if (HeroId == 0)
                    {
                        <td>
                            <a href="/abilities/hero/@ability.HeroId" class="btn btn-sm btn-info">
                                @(heroNames.ContainsKey(ability.HeroId) ? heroNames[ability.HeroId] : "Unknown")
                            </a>
                        </td>
                    }
                    <td>
                        <button @onclick="() => EditAbility(ability)" class="btn btn-sm btn-warning me-2">
                            <i class="bi bi-pencil"></i> Edit
                        </button>
                        <button @onclick="() => DeleteAbility(ability.Id)" class="btn btn-sm btn-danger">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int HeroId { get; set; }

    private List<Ability>? abilities;
    private Ability currentAbility = new();
    private bool isEditing = false;
    private string message = "";
    private bool isError = false;
    private string heroName = "";
    private Dictionary<int, string> heroNames = new();

    protected override async Task OnParametersSetAsync()
    {
        await LoadAbilities();
        if (HeroId > 0)
        {
            await LoadHeroName();
        }
        else
        {
            await LoadAllHeroNames();
        }
    }

    private async Task LoadAbilities()
    {
        try
        {
            var endpoint = HeroId > 0 
                ? $"api/Abilities/Hero/{HeroId}" 
                : "api/Abilities";
                
            var response = await Http.GetAsync(endpoint);
            if (response.IsSuccessStatusCode)
            {
                abilities = await response.Content.ReadFromJsonAsync<List<Ability>>();
                message = "";
                isError = false;
            }
            else
            {
                message = $"Error: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
                isError = true;
            }
        }
        catch (Exception ex)
        {
            message = $"Error loading abilities: {ex.Message}";
            isError = true;
        }
    }

    private async Task LoadHeroName()
    {
        try
        {
            var response = await Http.GetAsync($"api/Heroes/{HeroId}");
            if (response.IsSuccessStatusCode)
            {
                var hero = await response.Content.ReadFromJsonAsync<Hero>();
                heroName = hero?.Name ?? "Unknown Hero";
            }
        }
        catch
        {
            heroName = "Unknown Hero";
        }
    }

    private async Task LoadAllHeroNames()
    {
        try
        {
            var response = await Http.GetAsync("api/Heroes");
            if (response.IsSuccessStatusCode)
            {
                var heroes = await response.Content.ReadFromJsonAsync<List<Hero>>();
                heroNames = heroes?.ToDictionary(h => h.Id, h => h.Name) ?? new Dictionary<int, string>();
            }
        }
        catch
        {
            heroNames = new Dictionary<int, string>();
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            var abilityToSubmit = new
            {
                Id = currentAbility.Id,
                Name = currentAbility.Name,
                LocalizedName = currentAbility.LocalizedName,
                Description = currentAbility.Description,
                AbilityType = currentAbility.AbilityType,
                Affects = currentAbility.Affects,
                Damage = currentAbility.Damage,
                ImageUrl = currentAbility.ImageUrl,
                ManaCost = currentAbility.ManaCost,
                Cooldown = currentAbility.Cooldown,
                HeroId = HeroId > 0 ? HeroId : currentAbility.HeroId
            };

            HttpResponseMessage response;
            if (isEditing)
            {
                response = await Http.PutAsJsonAsync($"api/Abilities/{abilityToSubmit.Id}", abilityToSubmit);
            }
            else
            {
                response = await Http.PostAsJsonAsync("api/Abilities", abilityToSubmit);
            }

            if (response.IsSuccessStatusCode)
            {
                message = $"Ability successfully {(isEditing ? "updated" : "created")}!";
                isError = false;
                await LoadAbilities();
                ResetForm();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                message = $"API Error: {response.StatusCode} - {errorContent}";
                isError = true;
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            isError = true;
        }
    }

    private void EditAbility(Ability ability)
    {
        currentAbility = new Ability
        {
            Id = ability.Id,
            Name = ability.Name,
            LocalizedName = ability.LocalizedName,
            Description = ability.Description,
            AbilityType = ability.AbilityType,
            Affects = ability.Affects,
            Damage = ability.Damage,
            ImageUrl = ability.ImageUrl,
            ManaCost = ability.ManaCost,
            Cooldown = ability.Cooldown,
            HeroId = ability.HeroId
        };
        isEditing = true;
        message = "";
    }

    private void ResetForm()
    {
        currentAbility = new Ability
        {
            HeroId = HeroId > 0 ? HeroId : 0,
            AbilityType = "Active"
        };
        isEditing = false;
    }

    private void CancelEdit()
    {
        ResetForm();
        message = "";
    }

    private async Task DeleteAbility(int id)
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this ability?");
        if (!confirm) return;

        try
        {
            var response = await Http.DeleteAsync($"api/Abilities/{id}");
            if (response.IsSuccessStatusCode)
            {
                message = "Ability deleted successfully!";
                isError = false;
                await LoadAbilities();
            }
            else
            {
                message = $"Error deleting ability: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
                isError = true;
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            isError = true;
        }
    }

    public class Ability
    {
        public int Id { get; set; }
        
        [Required(ErrorMessage = "Name is required")]
        [StringLength(100, ErrorMessage = "Name cannot exceed 100 characters")]
        public string Name { get; set; } = string.Empty;
        
        [StringLength(200, ErrorMessage = "Localized name cannot exceed 200 characters")]
        public string LocalizedName { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Description is required")]
        public string Description { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Ability type is required")]
        public string AbilityType { get; set; } = string.Empty;
        
        public string Affects { get; set; } = string.Empty;
        public string Damage { get; set; } = string.Empty;
        
        [Url(ErrorMessage = "Please enter a valid URL")]
        public string ImageUrl { get; set; } = string.Empty;
        
        public string ManaCost { get; set; } = string.Empty;
        public string Cooldown { get; set; } = string.Empty;
        public int HeroId { get; set; }
    }

    public class Hero
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    [Inject]
    protected IJSRuntime JSRuntime { get; set; }
}